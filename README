Para compilar, se puede usar 

g++ -std=c++11 -o my_vrp_solver main.cpp VRPLIBReader.cpp

Si quieren agregar un nivel de optimizaci칩n para mejorar los tiempos de ejecuci칩n, 

g++ -std=c++11 -O2 -o my_vrp_solver main.cpp VRPLIBReader.cpp

INSTANCIAS

Junto con el c칩digo se proveen un conjunto inicial de instancias de hasta 200 clientes. Para algunas de ellas, se cuenta con soluciones obtenidas por otros algoritmos en la literatura. Pueden usarlas para validar y testear el c칩digo, pero no se espera que se utilicen como parte de la heur칤stica. Es s칩lo a fines de validar la implementaci칩n.


## 游빍 Gu칤a para Ejecutar los Tests

### 1. **Compilar el proyecto y los tests**

Aseg칰rate de tener CMake y un compilador de C++ (recomendado: g++ >= 7).

Desde la ra칤z del proyecto, ejecuta:

```bash
mkdir -p build
cd build
cmake ..
make
```

Esto generar치 el ejecutable de tests llamado `runTests` en la carpeta `build/`.

---

### 2. **Ejecutar todos los tests**

Desde la carpeta `build/`:

```bash
./runTests
```

Esto ejecutar치 **todos los tests** y mostrar치 un resumen de los resultados.

---

### 3. **Ejecutar solo un grupo de tests (por etiqueta)**

Puedes ejecutar solo los tests de un m칩dulo usando la etiqueta correspondiente.  
Por ejemplo, para ejecutar solo los tests de la b칰squeda local:

```bash
./runTests "[CWwLocalSearch]"
```

O para los tests del operador swap:

```bash
./runTests "[OperadorSwap]"
```

---

### 4. **Ver la lista de todos los tests disponibles**

```bash
./runTests -l
```

---

### 5. **Ver la salida detallada de los tests**

Para ver los mensajes de salida est치ndar (`std::cout`, `std::cerr`) durante los tests:

```bash
./runTests -s
```

---

### 6. **Ejecutar un test espec칤fico por nombre**

Puedes filtrar por el nombre (o parte del nombre) del test:

```bash
./runTests "Mejora la soluci칩n en instancia donde es posible"
```

---

### 7. **Notas adicionales**

- Si agregas nuevos archivos de test, ejecuta nuevamente `cmake ..` y `make` en la carpeta `build/` para que se incluyan.
- Todos los tests est치n escritos usando [Catch2](https://github.com/catchorg/Catch2).

---

**춰Con esto puedes verificar f치cilmente la robustez y correcci칩n de tu c칩digo!**